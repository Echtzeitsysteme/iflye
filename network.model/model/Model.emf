@GenModel(documentation="Meta-model for networks")
@namespace(uri="platform:/resource/network.model/model/Model.ecore", prefix="network.model")
package model;

@GenModel(documentation="A root node as entry point.")
class Root {
	@GenModel(documentation="Set of networks within this root node.")
	val Network [*]#root networks;
}

@GenModel(documentation="Abstract class for all elements.")
abstract class Element {
	@GenModel(documentation="Name.")
	attr EString [1] name;
}

@GenModel(documentation="Abstract class for all nodes.")
abstract class Node extends Element {
	@GenModel(documentation="Depth inside tree-based networks.")
	attr EInt [1] depth;
	
	@GenModel(documentation="Network this node belongs to.")
	ref Network [1]#nodes network;
	
	@GenModel(documentation="Set of outgoing links (links that start at this node).")
	ref Link [*]#source outgoingLinks;
	
	@GenModel(documentation="Set of incoming links (links that end at this node).")
	ref Link [*]#target incomingLinks;
}

@GenModel(documentation="Abstract class for all servers.")
abstract class Server extends Node {
	@GenModel(documentation="CPU amount of this server.")
	attr EInt [1] cpu;
	
	@GenModel(documentation="Memory (RAM) amout of this server.")
	attr EInt [1] memory;
	
	@GenModel(documentation="Storage (HDD/SSD) amout of this server.")
	attr EInt [1] storage;
}

@GenModel(documentation="Abstract class for all switches.")
abstract class Switch extends Node {
	
}

@GenModel(documentation="Abstract class for all links.")
abstract class Link extends Element {
	@GenModel(documentation="Bandwidth amount of this link.")
	attr EInt [1] bandwidth;
	
	@GenModel(documentation="Network this link belongs to.")
	ref Network [1]#links network;
	
	@GenModel(documentation="Source node at which this link starts.")
	ref Node [1]#outgoingLinks source;
	
	@GenModel(documentation="Target node at which this link ends.")
	ref Node [1]#incomingLinks target;
}

@GenModel(documentation="Abstract class for all networks.")
abstract class Network extends Element {
	@GenModel(documentation="Root node this network belongs to.")
	ref Root [1]#networks root;
	
	@GenModel(documentation="Set of nodes that are part of this network.")
	val Node [*]#network nodes;
	
	@GenModel(documentation="Set of links that are part of this network.")
	val Link [*]#network links;
}

@GenModel(documentation="Abstract class that represents a substrate element.")
abstract class SubstrateElement extends Element {
	// Keep in mind: The host element must not be a switch!
	@GenModel(documentation="Virtual guest links.")
	ref VirtualLink [*]#host guestLinks;
}

@GenModel(documentation="Abstract class that represents a substrate node.")
abstract class SubstrateNode extends Node, SubstrateElement {
	@GenModel(documentation="Virtual guest switches.")
	ref VirtualSwitch [*]#host guestSwitches;
	
	@GenModel(documentation="Paths that use this node.")
	ref SubstratePath [*]#nodes paths;
	
	@GenModel(documentation="Set of outgoing paths (paths that start at this node).")
	ref SubstratePath [*]#source outgoingPaths;
	
	@GenModel(documentation="Set of incoming paths (paths that end at this node).")
	ref SubstratePath [*]#target incomingPaths;
}

@GenModel(documentation="Class that represents a substrate server.")
class SubstrateServer extends Server, SubstrateNode {
	@GenModel(documentation="Virtual guest servers.")
	ref VirtualServer [*]#host guestServers;
	
	@GenModel(documentation="Residual CPU amount of this server.")
	attr EInt [1] residualCpu;
	
	@GenModel(documentation="Residual memory amount of this server.")
	attr EInt [1] residualMemory;
	
	@GenModel(documentation="Residual storage amount of this server.")
	attr EInt [1] residualStorage;
	
	// Extension for directly hosting a complete virtual network
	@GenModel(documentation="Virtual guest networks.")
	ref VirtualNetwork [*]#hostServer guestNetworks;
}

@GenModel(documentation="Class that represents a substrate switch.")
class SubstrateSwitch extends Switch, SubstrateNode {
	
}

@GenModel(documentation="Class that represents a substrate link.")
class SubstrateLink extends Link, SubstrateElement {
	@GenModel(documentation="Residual bandwidth amount of this link.")
	attr EInt [1] residualBandwidth;
	
	@GenModel(documentation="Paths that use this link.")
	ref SubstratePath [*]#links paths;
}

@GenModel(documentation="Class that represents a substrate path.")
class SubstratePath extends SubstrateElement {
	@GenModel(documentation="Network this path belongs to.") 
	ref SubstrateNetwork [1]#paths network;
	
	@GenModel(documentation="Source node at which this path starts.")
	ref SubstrateNode [1]#outgoingPaths source;
	
	@GenModel(documentation="Target node at which this path ends.")
	ref SubstrateNode [1]#incomingPaths target;
	
	@GenModel(documentation="All nodes that are part of this path.")
	ref SubstrateNode [*]#paths nodes;
	
	@GenModel(documentation="All links that are part of this path.")
	ref SubstrateLink [*]#paths links;
	
	@GenModel(documentation="Bandwidth amount of this path.")
	attr EInt [1] bandwidth;
	
	@GenModel(documentation="Number of hops of this path.")
	attr EInt [1] hops;

	@GenModel(documentation="Residual bandwidth amount of this path.")
	attr EInt [1] residualBandwidth;
}

@GenModel(documentation="Class that represents a substrate network")
class SubstrateNetwork extends Network, SubstrateElement {
	@GenModel(documentation="Virtual guest networks that are running on this host network.")
	ref VirtualNetwork [*]#host guests;
	
	@GenModel(documentation="Set of paths that are part of this network.")
	val SubstratePath [*]#network paths;
}

@GenModel(documentation="Abstract class that represents a virtual element.")
abstract class VirtualElement extends Element {
	
}

@GenModel(documentation="Abstract class that represents a virtual node.")
abstract class VirtualNode extends Node, VirtualElement {
	
}

@GenModel(documentation="Class that represents a virtual server.")
class VirtualServer extends Server, VirtualNode {
	@GenModel(documentation="Host server that runs this virtual server.")
	ref SubstrateServer [1]#guestServers host;
}

@GenModel(documentation="Class that represents a virtual switch.")
class VirtualSwitch extends Switch, VirtualNode {
	@GenModel(documentation="Host node that runs this virtual switch.")
	ref SubstrateNode [1]#guestSwitches host;
}

@GenModel(documentation="Class that represents a virtual link.")
class VirtualLink extends Link, VirtualElement {
	// Keep in mind: The host element must not be a switch!
	@GenModel(documentation="Substrate host element.")
	ref SubstrateElement [1]#guestLinks host;
}

@GenModel(documentation="Represents a virtual network.")
class VirtualNetwork extends Network, VirtualElement {
	@GenModel(documentation="Host network that runs this virtual network.")
	ref SubstrateNetwork [1]#guests host;
	
	// Extension for the total amount of server resources
	@GenModel(documentation="Total CPU amount of this virtual network.")
	attr EInt [1] cpu;
	
	@GenModel(documentation="Total memory amount of this virtual network.")
	attr EInt [1] memory;
	
	@GenModel(documentation="Total storage amount of this virtual network.")
	attr EInt [1] storage;
	
	@GenModel(documentation="Host server that runs this virtual network.")
	ref SubstrateServer [1]#guestNetworks hostServer;
}
