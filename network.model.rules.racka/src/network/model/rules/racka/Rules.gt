import "http://www.eclipse.org/emf/2002/Ecore"
import "platform:/resource/network.model/model/Model.ecore"

//
// Servers
//

// Substrate server must have at least the required resources available
rule serverMatchPositive() {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substrateNode: SubstrateServer {
		.residualCpu := substrateNode.residualCpu - virtualNode.cpu
		.residualMemory := substrateNode.residualMemory - virtualNode.memory
		.residualStorage := substrateNode.residualStorage - virtualNode.storage
		++ -guestServers -> virtualNode
	}
	
	virtualNode: VirtualServer {
		++ -host -> substrateNode
	}
	
	substrateNetwork: SubstrateNetwork {
		-nodess -> substrateNode
	}
	
	virtualNetwork: VirtualNetwork {
		-nodess -> virtualNode
	}
	
	# virtualNode.cpu <= substrateNode.residualCpu
	# virtualNode.memory <= substrateNode.residualMemory
	# virtualNode.storage <= substrateNode.residualStorage
	
	// Explicitly exclude substrate servers with any residual resource equals to 0
	// TODO: Fix data type mismatch
	// See: https://github.com/eMoflon/emoflon-ibex/issues/408
//	# substrateNode.residualCpu > 0
//	# substrateNode.residualMemory > 0
//	# substrateNode.residualStorage > 0
}

//
// Switches
//

// Match from virtual switch to substrate switch
rule switchMatchPositive() {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substrateSwitch: SubstrateSwitch {
		++ -guestSwitches -> virtualSwitch
	}
	
	virtualSwitch : VirtualSwitch {
		++ -host -> substrateSwitch
	}
	
	substrateNetwork: SubstrateNetwork {
		-nodess -> substrateSwitch
	}
	
	virtualNetwork: VirtualNetwork {
		-nodess -> virtualSwitch
	}
}

//
// Links
//

// Match from a virtual link to a substrate path (positive)
rule linkPathMatchPositive() {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substratePath: SubstratePath {
		++ -guestLinks -> virtualLink
		.residualBandwidth := substratePath.residualBandwidth - virtualLink.bandwidth
		
		// Update all substrate links
		forEach links->l {
			iterator::l.residualBandwidth := iterator::l.residualBandwidth - virtualLink.bandwidth
		}
	}
	
	virtualLink: VirtualLink {
		++ -host -> substratePath
	}
	
	substrateNetwork: SubstrateNetwork {
		-paths -> substratePath
	}
	
	virtualNetwork: VirtualNetwork {
		-links -> virtualLink
	}
	
	# virtualLink.bandwidth <= substratePath.residualBandwidth
	
	// Explicitly exclude substrate paths with a residual bandwidth equals to 0
	# substratePath.residualBandwidth > 0
	
	// Explicitly remove paths that are longer than 1 hop
	# substratePath.hops == 1
}

// Match from virtual link to substrate server
// This one does not have any constraints.
rule linkServerMatchPositive() {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substrateServer: SubstrateServer {
		++ -guestLinks -> virtualLink
	}
	
	virtualLink: VirtualLink {
		++ -host -> substrateServer
	}
	
	substrateNetwork: SubstrateNetwork {
		-nodess -> substrateServer
	}
	
	virtualNetwork: VirtualNetwork {
		-links -> virtualLink
	}
}
