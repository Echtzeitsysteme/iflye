import "http://www.eclipse.org/emf/2002/Ecore"
import "platform:/resource/metamodel/model/metamodel.ecore"

//
// Servers
//

// Abstract rule to create a server
abstract rule createServer(id: EString, cpu: EInt, memory: EInt, storage: EInt, depth: EInt, status: Status) {
	network : Network {
		++ -nodes->server
	}
	
	++ server : Server {
		.name := param::id
		.cpu := param::cpu
		.memory := param::memory
		.storage := param::storage
		.depth := param::depth
		.status := param::status
	}	
}

// Rule to create a substrate server
rule createSubstrateServer(id: EString, cpu: EInt, memory: EInt, storage: EInt, depth: EInt, status: Status) refines createServer {
	network: SubstrateNetwork
	++ server: SubstrateServer
}

// Rule to create a virtual server
rule createVirtualServer(id: EString, cpu: EInt, memory: EInt, storage: EInt, depth: EInt, status: Status) refines createServer {
	network: VirtualNetwork
	++ server: VirtualServer
}

//
// Switches
//

// Abstract rule to create a switch
abstract rule createSwitch(id: EString, depth: EInt, status: Status) {
	network : Network {
		++ -nodes->sw
	}
	
	++ sw : Switch {
		.name := param::id
		.depth := param::depth
		.status := param::status
	}
}

// Rule to create a substrate switch
rule createSubstrateSwitch(id: EString, depth: EInt, status: Status) refines createSwitch {
	network : SubstrateNetwork
	++ sw : SubstrateSwitch
}

// Rule to create a virtual switch
rule createVirtualSwitch(id: EString, depth: EInt, status: Status) refines createSwitch {
	network : VirtualNetwork
	++ sw : VirtualSwitch
}

//
// Links
//

// Abstract rule to create a link
abstract rule createLink(id: EString, sourceId: EString, targetId: EString, bandwidth: EInt, status: Status) {
	network : Network {
		-nodes->source
		-nodes->target
	}
	
	source: Node
	target: Node
	
	# source.name == param::sourceId
	# target.name == param::targetId
	
	++ link : Link {
		.name := param::id
		.bandwidth := param::bandwidth
		.status := param::status
		++ -network->network
		++ -source->source
		++ -target->target
	}
}

// Rule to create a virtual link
rule createVirtualLink(id: EString, sourceId: EString, targetId: EString, bandwidth: EInt, status: Status) refines createLink {
	source : VirtualNode
	target : VirtualNode
	++ link: VirtualLink
} 

// Rule to create a substrate link
rule createSubstrateLink(id: EString, sourceId: EString, targetId: EString, bandwidth: EInt, status: Status) refines createLink {
	source : SubstrateNode
	target : SubstrateNode
	++ link: SubstrateLink
}

//
// Path
//

// Abstract rule to create a path
abstract rule createPath(id: EString, sourceId: EString, targetId: EString, status: Status) {
	network : Network {
		-nodes->source
		-nodes->target
		++ -paths->path
	}
	
	source: Node
	target: Node
	
	# source.name == param::sourceId
	# target.name == param::targetId	
	
	++ path : Path {	
		.name := param::id
		.status := param::status
		++ -source->source
		++ -target->target
		++ -nodes->source
		++ -nodes->target
	}
}

// Rule to create a substrate path
rule createSubstratePath(id: EString, sourceId: EString, targetId: EString, status: Status) refines createPath {
	network : SubstrateNetwork
	source : SubstrateNode
	target : SubstrateNode
	++ path : SubstratePath
}
