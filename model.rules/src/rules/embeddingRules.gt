import "http://www.eclipse.org/emf/2002/Ecore"
import "platform:/resource/network.model/model/Model.ecore"

// Add elements
//pattern substrateServer() {
//	substrateServer: SubstrateServer
//}
//
//pattern substrateLink() {
//	substrateLink: SubstrateLink
//}
//
//pattern virtualServer() {
//	virtualServer: VirtualServer
//}
//
//pattern virtualSwitch() {
//	virtualSwitch: VirtualSwitch
//}
//
//pattern virtualLink() {
//	virtualLink: VirtualLink
//}

//
// Networks
//
//
//pattern networkMatch() {
//	root: Root {
//		-networks -> substrateNetwork
//		-networks -> virtualNetwork
//	}
//	
//	substrateNetwork: SubstrateNetwork
//	virtualNetwork: VirtualNetwork
//}

// TODO: Remove all negative patterns

//
// Servers
//

// Substrate server must have at least the required resources available
pattern serverMatchPositive() {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substrateNode: SubstrateServer
	virtualNode: VirtualServer
	
	substrateNetwork: SubstrateNetwork {
		-nodes -> substrateNode
	}
	
	virtualNetwork: VirtualNetwork {
		-nodes -> virtualNode
	}
	
	# virtualNode.cpu <= substrateNode.residualCpu
	# virtualNode.memory <= substrateNode.residualMemory
	# virtualNode.storage <= substrateNode.residualStorage
}

//// All server mappings but without the positive ones
//// (These are forbidden via the condition below.)
//pattern serverMatchNegative() {
//	root: Root {
//		-networks -> substrateNetwork
//		-networks -> virtualNetwork
//	}
//	
//	substrateNode: SubstrateServer
//	virtualNode: VirtualServer
//	
//	substrateNetwork: SubstrateNetwork {
//		-nodes -> substrateNode
//	}
//	
//	virtualNetwork: VirtualNetwork {
//		-nodes -> virtualNode
//	}
//}
//when serverMatchNotValid
//
//condition serverMatchNotValid = forbid serverMatchPositive

//pattern serverMatchSwitchNegative() {
//	root: Root {
//		-networks -> substrateNetwork
//		-networks -> virtualNetwork
//	}
//	
//	substrateNode: SubstrateSwitch
//	virtualNode: VirtualServer
//	
//	substrateNetwork: SubstrateNetwork {
//		-nodes -> substrateNode
//	}
//	
//	virtualNetwork: VirtualNetwork {
//		-nodes -> virtualNode
//	}
//}

//
// Switches
//

// Match from virtual switch to substrate node
// (Substrate node could either be a server or a switch.)
pattern switchNodeMatchPositive() {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substrateNode: SubstrateNode
	virtualSwitch : VirtualSwitch
	
	substrateNetwork: SubstrateNetwork {
		-nodes -> substrateNode
	}
	
	virtualNetwork: VirtualNetwork {
		-nodes -> virtualSwitch
	}
}

//
// Links
//

// Match from a virtual link to a substrate path (positive)
pattern linkPathMatchPositive() {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substratePath: SubstratePath
	virtualLink: VirtualLink
	
	substrateNetwork: SubstrateNetwork {
		-paths -> substratePath
	}
	
	virtualNetwork: VirtualNetwork {
		-links -> virtualLink
	}
	
	# virtualLink.bandwidth <= substratePath.residualBandwidth
}

//// Match from a virtual link to a substrate path (but negative)
//pattern linkPathMatchNegative() {
//	root: Root {
//		-networks -> substrateNetwork
//		-networks -> virtualNetwork
//	}
//	
//	substratePath: SubstratePath
//	virtualLink: VirtualLink
//	
//	substrateNetwork: SubstrateNetwork {
//		-paths -> substratePath
//	}
//	
//	virtualNetwork: VirtualNetwork {
//		-links -> virtualLink
//	}
//	
//	# virtualLink.bandwidth > substratePath.residualBandwidth
//}

// Match from virtual link to substrate server
// This one does not have any constraints.
pattern linkServerMatchPositive() {
	root: Root {
		-networks -> substrateNetwork
		-networks -> virtualNetwork
	}
	
	substrateServer: SubstrateServer
	virtualLink: VirtualLink
	
	substrateNetwork: SubstrateNetwork {
		-nodes -> substrateServer
	}
	
	virtualNetwork: VirtualNetwork {
		-links -> virtualLink
	}
}
